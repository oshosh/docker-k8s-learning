# NGINX 사용자 및 프로세스 설정
user nginx;
worker_processes auto;  # 사용 가능한 모든 CPU 코어를 활용하여 워커 프로세스를 자동으로 설정
pid /run/nginx.pid;  # NGINX 프로세스 ID 파일 위치

# 이벤트 설정
events {
    worker_connections 1024;  # 각 워커 프로세스당 최대 연결 수 설정
}

http {
    include /etc/nginx/mime.types;  # MIME 타입 파일 포함
    default_type application/octet-stream;  # 기본 MIME 타입 설정

    # 로그 형식 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;  # 액세스 로그 파일 위치 및 형식 설정
    error_log /var/log/nginx/error.log warn;  # 에러 로그 파일 위치 및 레벨 설정

    sendfile on;  # 효율적인 파일 전송 설정
    tcp_nopush on;  # 더 나은 네트워크 성능을 위해 TCP_NOPUSH 옵션 사용
    tcp_nodelay on;  # 더 나은 네트워크 성능을 위해 TCP_NODELAY 옵션 사용
    keepalive_timeout 65;  # 클라이언트 연결 유지 시간 설정
    types_hash_max_size 2048;  # MIME 타입 해시 테이블 크기 설정

    server {
        listen 80;  # HTTP 포트 80에서 수신 대기

        # 프론트엔드 요청을 프록시하는 설정
        location / {
            proxy_pass http://frontend:3000;  # 프론트엔드 서비스로 프록시
            proxy_set_header Host $host;  # 원래 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr;  # 클라이언트의 실제 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 프록시 체인을 통한 클라이언트 IP 전달
            proxy_set_header X-Forwarded-Proto $scheme;  # 원래 요청의 스킴 (HTTP/HTTPS) 전달
        }

        # 백엔드 API 요청을 프록시하는 설정
        location /api/ {
            proxy_pass http://backend:80;  # 백엔드 서비스로 프록시
            proxy_set_header Host $host;  # 원래 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr;  # 클라이언트의 실제 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 프록시 체인을 통한 클라이언트 IP 전달
            proxy_set_header X-Forwarded-Proto $scheme;  # 원래 요청의 스킴 (HTTP/HTTPS) 전달
        }

        # 에러 페이지 설정
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;  # 에러 페이지 파일 위치 설정
        }
    }
}